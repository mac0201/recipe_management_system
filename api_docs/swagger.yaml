openapi: 3.0.0
info:
  title: Recipe Management System
  description: API for managing recipes
  version: 1.0.0

servers:
  - url: /api

paths:
  /recipe:
    get:
      summary: List all recipes
      description: Retrieves a list of all stored recipes. The list will be empty if no recipes are stored
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipeDTO'

  /recipe/new:
    post:
      summary: Add new recipe
      description: Adds a new recipe with provided data
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeDTO'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddResponseDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /recipe/{id}:
    get:
      summary: Get recipe by ID
      description: Retrieves a specific recipe by its unique identifier
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the recipe
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipeDTO'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete recipe by ID
      description: Deletes a specific recipe by its unique identifier
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the recipe
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update recipe with given ID
      description: Retrieves the pet with given ID and updates its values according to fields in the request body.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeDTO'
      responses:
        '204':
          description: No Content. Update was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddResponseDTO'
        '400':
          description: Bad Request. The request body contains incorrect/invalid fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found. The recipe with given ID was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /recipe/search:
    get:
      summary: Search for recipes by name or category
      description: Returns a list of RecipeDTO objects matching the provided search criteria. The returned list can be empty.
      parameters:
        - name: name
          in: query
          description: The text that the name of the recipe should contain (optional). Mutually excludes 'category' parameter.
          required: false
          schema:
            type: string
        - name : category
          in: query
          description: The category of the recipe to search for (optional). Mutually excludes 'name' parameter.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipeDTO'
        '400':
          description: Bad Request. Either none or both query parameters were provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    RecipeDTO:
      type: object
      required:
        - name
        - category
        - description
        - ingredients
        - directions
      properties:
        name:
          type: string
          description: Name of the recipe
          nullable: false
          minLength: 1
        category:
          type: string
          description: Category of the recipe
          nullable: false
          minLength: 1
        description:
          type: string
          description: Description of the recipe
          nullable: false
          minLength: 1
        date:
          type: object
          description: The date this recipe was added/updated. Ignored if provided in a request and set by backend.
          nullable: false
        ingredients:
          type: array
          items:
            type: string
          description: A list of ingredients in the recipe
          nullable: false
          minItems: 1
        directions:
          type: array
          items:
            type: string
          description: A list of directions in the recipe
          nullable: false
          minItems: 1

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: The error message

    AddResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: A long representing ID of the added/updated recipe

